#
# Config
#

if command -v sudo > /dev/null && [[ $( id -u ) -ne 0 ]] ; then
    _sudo="sudo "
fi

#
# Aliases
#

# Core
alias -- -='cd -'
alias sl='ls -lh'
alias lsl='ls -lh'
alias lsa='ls -lhA'
alias rm='rm -I'

# SSH
alias scpi='scp -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'
alias sshi='ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'

alias rsynci='rsync -e "ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"'

# Misc
alias tree-no-git='tree -aI .git'
alias delpyc='find . -iname "*.pyc" -print -delete'
alias xc='xclip -sel clipboard'

command -v colordiff > /dev/null &&
    alias diff='colordiff'

command -v most > /dev/null &&
    alias man='man -P most'

# runas
if [[ -n "$_sudo" ]] ; then
    alias gitcmd='sudo -u git'
    alias wwwcmd='sudo -u www-data'
fi

# APT
alias update="${_sudo}aptitude update"
alias safeupgrade="${_sudo}aptitude safe-upgrade"
alias clean="${_sudo}aptitude clean"
alias forget-new="${_sudo}aptitude forget-new"
alias keep-all="${_sudo}aptitude keep-all"
alias list-new="aptitude search ~N"

# VirtualBox
if command -v VBoxManage > /dev/null ; then
    alias vmlist='VBoxManage list vms'
    alias vmlistr='VBoxManage list runningvms'
fi

#
# Funções
#

vminit()
{
    [[ "$1" ]] || return 2
    vboxheadless --vrde off --startvm "$1" > /dev/null &
}

..()
{
    local hops="${1:-1}"
    local dest=""

    [[ $hops =~ ^[0-9]+$ ]] || {
        echo "uso: .. [N]" >&2
        return 2
    }

    while [[ $hops -gt 0 ]] ; do
        dest="${dest}../"
        let 'hops--'
    done

    cd "$dest"
}

mkcd()
{
    mkdir -pv "$@" || return
    cd "$*"
}

# Corrige permissões: diretórios = 755, arquivos = 644
fixperms()
{
    local v

    [[ "$1" = "-v" ]] && { v="-v" ; shift ; }

    [[ -z "$1" ]] && {
        echo "$FUNCNAME: missing operand" >&2
        return 2
    }

    echo "Updating directory permissions of '${*}' to 755 (rwxr-xr-x) ..."
    find "${*}" -type d -exec chmod $v 755 {} \;

    [[ -n "$v" ]] && echo

    echo "Updating file permissions of '${*}' to 644 (rw-r--r--) ..."
    find "${*}" -type f -exec chmod $v 644 {} \;
}

# virtualenvwrapper
load_virtualenvwrapper()
{
    export WORKON_HOME=~/.virtualenvs
    source /usr/local/bin/virtualenvwrapper.sh || return

    [[ "$1" ]] && {
        workon $1 && echo "Carregando virtualenv: $1"
    }
}

# rbenv
load_rbenv()
{
    if [[ -d "$HOME/.rbenv" ]] ; then
        export PATH="$HOME/.rbenv/bin:$PATH"
        eval "$(rbenv init -)"
    else
        echo "fatal: directory $HOME/.rbenv not found. Aborting." >&2
        return 1
    fi
}

# rvm
load_rvm()
{
    # Load RVM into a shell session *as a function*
    if [[ -s "$HOME/.rvm/scripts/rvm" ]] ; then
        source "$HOME/.rvm/scripts/rvm"
    else
        echo "fatal: RVM not found in $HOME/.rvm/scripts/rvm. Aborting." >&2
        return 1
    fi
}

# Docker
wipe_containers()
{
    [[ "$1" ]] || return 2

    local opts
    [[ "$1" == "--rm" ]] && opts="-a"

    for c in $( docker ps -q $opts ) ; do
        docker "${@/--/}" "$c"
    done
}

kill_all_containers() { wipe_containers --kill  ; }
stop_all_containers() { wipe_containers --stop  ; }
rm_all_containers()   { wipe_containers --rm -v ; }

rm_dangling_images()
{
    local dangling_images="$( docker images -q --filter 'dangling=true' )"

    [[ -n "$dangling_images" ]] \
        && docker rmi $dangling_images \
        || echo "Nenhuma imagem órfã encontrada."
}

docker_cleanup()
{
    for cmd in {kill,rm}_all_containers rm_dangling_images ; do
        echo "-> $cmd"
        "$cmd" || return $?
    done
}

pgreps()
{
    [[ "$1" ]] || {
        echo "uso: $FUNCNAME <busca>" >&2
        return 2
    }

    ps aux | egrep "$1" | grep -v egrep
}

debchangelog()
{
    [[ "$1" ]] || {
        echo "uso: $FUNCNAME <pacote>" >&2
        return 2
    }

    zless /usr/share/doc/$1/changelog*.gz
}

#
# Limpeza
#

unset _sudo
